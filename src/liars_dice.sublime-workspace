{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"get",
				"get_possible_next_moves"
			],
			[
				"propSI",
				"propSimIteration"
			],
			[
				"taskSo",
				"tasksSolved"
			],
			[
				"propSi",
				"propSimIteration"
			],
			[
				"hel",
				"helmholtzFrontiersFilename"
			],
			[
				"propSim",
				"propSimIteration"
			],
			[
				"is",
				"isinstance"
			],
			[
				"nSi",
				"nSim"
			],
			[
				"file",
				"fileName"
			],
			[
				"ex",
				"examples"
			],
			[
				"feature",
				"featureExtractorArgs"
			],
			[
				"recog",
				"recognitionSteps"
			],
			[
				"Gra",
				"Grammar"
			],
			[
				"unif",
				"uniformGrammar"
			],
			[
				"hell",
				"helmholtzGrammar"
			],
			[
				"fea",
				"featureExtractorArgs"
			],
			[
				"hold",
				"holdout"
			],
			[
				"gra",
				"grammars"
			],
			[
				"logPro",
				"logPosterior"
			],
			[
				"re",
				"request"
			],
			[
				"exp",
				"expression"
			],
			[
				"base",
				"baseGrammar"
			],
			[
				"vale",
				"valuesToInt"
			],
			[
				"helmholtzFron",
				"helmholtzFrontiersFilename"
			],
			[
				"reque",
				"requests"
			],
			[
				"task",
				"tasks"
			],
			[
				"new",
				"newFrontiers"
			],
			[
				"reco",
				"recomputeTasksWithTaskSpecificInputs"
			],
			[
				"compute",
				"computePriorFromTasks"
			],
			[
				"properties",
				"propertiesMask"
			],
			[
				"prpo",
				"properties"
			],
			[
				"proper",
				"propertiesMask"
			],
			[
				"filted",
				"filteredProperties"
			],
			[
				"filter",
				"filterProperties"
			],
			[
				"filtered",
				"filteredProperties"
			],
			[
				"filtere",
				"filteredProperties"
			],
			[
				"propS",
				"propertySimTasksMatrix"
			],
			[
				"sorted",
				"sortedTaskProbsPerPropValue"
			],
			[
				"taskSi",
				"taskSigToConsider"
			],
			[
				"properti",
				"properties"
			],
			[
				"corr",
				"correlations"
			],
			[
				"prope",
				"properties"
			],
			[
				"hand",
				"handwrittenProperties"
			],
			[
				"sampled",
				"sampledFrontiers"
			],
			[
				"timt",
				"timeout"
			],
			[
				"retur",
				"returnTypes"
			],
			[
				"Pro",
				"Property"
			],
			[
				"return",
				"returnTypes"
			],
			[
				"equi",
				"equivalentSampledProperties"
			],
			[
				"equ",
				"equivalentSampledProperties"
			],
			[
				"handwrite",
				"handwritten"
			],
			[
				"equiva",
				"equivalentIdxs"
			],
			[
				"enumerated",
				"enumeratedProperties"
			],
			[
				"enumerte",
				"enumerateProperties"
			],
			[
				"all",
				"allProperties"
			],
			[
				"front",
				"frontier"
			],
			[
				"propertyTask",
				"propertyTasksToEnumerate"
			],
			[
				"prop",
				"properties"
			],
			[
				"allSam",
				"allSameValues"
			],
			[
				"progrm",
				"programRequest"
			],
			[
				"example",
				"exampleValues"
			],
			[
				"tout",
				"toutput"
			],
			[
				"other",
				"otherTasksEntropies"
			],
			[
				"otherTask",
				"otherTasksMeanEntropy"
			],
			[
				"entr",
				"entropyDifference"
			],
			[
				"val",
				"valuesToUse"
			],
			[
				"e",
				"entropy"
			],
			[
				"value",
				"valuesToUse"
			],
			[
				"min",
				"minNumNonErrorExamples"
			],
			[
				"err",
				"nonErrorValues"
			],
			[
				"NOne",
				"None"
			],
			[
				"getTas",
				"getTaskPropertyEntropy"
			],
			[
				"propertyTa",
				"propertyTaskEntropy"
			],
			[
				"Proepr",
				"PropertyScore"
			],
			[
				"gramma",
				"grammarName"
			],
			[
				"getPro",
				"getPropertySamplingGrammar"
			],
			[
				"enumerate",
				"enumerateProperties"
			],
			[
				"sample",
				"sampledFrontiers"
			],
			[
				"nSim",
				"nSimList"
			],
			[
				"only",
				"onlyUseTrueProperties"
			],
			[
				"fro",
				"frontierWeights"
			],
			[
				"fileanm",
				"filename"
			],
			[
				"same",
				"samePropertyVals"
			],
			[
				"pr",
				"properties"
			],
			[
				"propr",
				"propertyToPriorDistribution"
			],
			[
				"enumerat",
				"enumerationResults"
			],
			[
				"uniq",
				"uniqueValues"
			],
			[
				"values",
				"valuesToInt"
			],
			[
				"uni",
				"uniqueValues"
			],
			[
				"normal",
				"normalizedCounts"
			],
			[
				"sim",
				"similarityVector"
			],
			[
				"propertyT",
				"propertyToPriorDistribution"
			],
			[
				"num",
				"numSolvedPrograms"
			],
			[
				"non",
				"nonzeroCountValues"
			],
			[
				"va",
				"valueRange"
			],
			[
				"propert",
				"propertySimTasksMatrix"
			],
			[
				"model",
				"modelNames"
			],
			[
				"allTr",
				"allTrueIdx"
			],
			[
				"property",
				"propertyFeatureExtractor"
			],
			[
				"nS",
				"nSimList"
			],
			[
				"recogni",
				"recognizerGrammars"
			],
			[
				"upda",
				"updateSavedPropertiesWithNewCacheTable"
			],
			[
				"upd",
				"updateSavedPropertiesWithNewCacheTable"
			],
			[
				"proepr",
				"propertiesPath"
			],
			[
				"cach",
				"cachedTaskEvaluations"
			],
			[
				"cac",
				"cachedTaskEvaluations"
			],
			[
				"math",
				"matchingProperty"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "// Model Main\n\nvar get_total_dice_with_number = function(dice_number_guess, alleged_counts, my_dice, players_num_dices) {\n  var simulate_player = function(num_dice) {player_die_roll(num_dice);};\n  var players = map(simulate_player, players_num_dices);\n  // conditioning statement\n  var temp = mapN(function(i) {condition(players[0][i] === my_dice[i])}, my_dice.length);\n  \n  var num_dice_with_number = function(dice_number_guess, player_dice) {\n    var filtered_dice = filter(function(el) {el == dice_number_guess || el == 1;}, player_dice);\n    return filtered_dice.length;\n  };\n  var total_dice_with_number = sum(\n    map(function(player_dice) {\n      num_dice_with_number(dice_number_guess, player_dice);\n    }, players));\n  return total_dice_with_number;\n}\n\nvar call_or_not = function (total_dice_with_number, dice_number_guess, alleged_counts, num_players) {\n    var success_value = 1/(num_players-1);\n    var failure_value = -1;\n    var call_success_prob = total_dice_with_number < alleged_counts;\n    var call_expected_utility = (call_success_prob * success_value) + ((1-call_success_prob) * failure_value);\n    \n    // assume the utlity of no call is 0\n    var no_call_utility = 0;\n    var possible_moves = get_possible_next_moves()\n\n    var action = call_expected_utility > no_call_utility ? \"call\" : \"no_call\";\n    return action;\n}\n\nvar model = function() {\n  var players_num_dices = [1,3];\n  var my_dice = [1];\n  var dice_number_guess = 4;\n  var alleged_counts = 2;\n  \n  var total_dice_with_number = get_total_dice_with_number(dice_number_guess, alleged_counts, my_dice, players_num_dices);\n  return call_or_not(total_dice_with_number, dice_number_guess, alleged_counts, players_num_dices.length);\n}\n\n// viz.auto(Infer({method: 'MCMC', samples: 1}, model));\n// viz.auto(Infer({method: 'MCMC', samples: 50000}, model));\n\n// model();\nget_possible_next_moves(3, 5, 5);\n",
			"file": "main.wppl",
			"file_size": 1831,
			"file_write_time": 132705922810963798,
			"settings":
			{
				"buffer_size": 1877,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "domain_specific_utils.wppl",
			"settings":
			{
				"buffer_size": 522,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"llist",
				"Package Control: List Unmanaged Packages"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"isntal",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"package",
				"Install Package Control"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
	],
	"file_history":
	[
		"/Users/theo/Development/liars_dice/README.md",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/grammar.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/domains/list/propSim.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/domains/list/makeListTasks.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/domains/list/main.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/domains/list/listPrimitives.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/domains/list/utilsProperties.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/solvers/Dreaming.ml",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/enumeration.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/solvers/compression.ml",
		"/Users/theo/Development/program_induction/prop_sig/ec2/solvers/enumeration.ml",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/likelihoodModel.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/domains/list/utilsPropertySampling.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/solvers/task.ml",
		"/Users/theo/Development/program_induction/prop_sig/ec2/solvers/solver.ml",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/domains/list/property.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/solvers/program.ml",
		"/Users/theo/Development/program_induction/prop_sig/ec2/solvers/Helmholtz.ml",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/dreaming.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/bin/jr.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/task.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/domains/list/utilsBaselines.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/recognition.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/type.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/bin/list.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/frontier.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/dreamcoder.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/utilities.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/domains/list/utilsPlotting.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/domains/list/propertySignatureExtractor.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/tests/test_dreamcoder.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/domains/list/resultsProcessing.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/program.py",
		"/Users/theo/Development/program_induction/prop_sig/ec2/dreamcoder/domains/list/handwrittenProperties.py",
		"/Users/theo/Development/program_induction/prop_sig/ec/dreamcoder/domains/list/resultsProcessing.py",
		"/Users/theo/Development/program_induction/prop_sig/ec/bin/sampleProperties.py",
		"/Users/theo/Development/program_induction/prop_sig/ec/bin/list.py"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 101.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.wppl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1877,
						"regions":
						{
						},
						"selection":
						[
							[
								1239,
								1239
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "domain_specific_utils.wppl",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 522,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "liars_dice.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"grammar",
				"dreamcoder/grammar.py"
			],
			[
				"main",
				"dreamcoder/domains/list/main.py"
			],
			[
				"listPr",
				"dreamcoder/domains/list/listPrimitives.py"
			],
			[
				"propS",
				"dreamcoder/domains/list/propSim.py"
			],
			[
				"list/main",
				"dreamcoder/domains/list/main.py"
			],
			[
				"propSi",
				"dreamcoder/domains/list/propSim.py"
			],
			[
				"listPri",
				"dreamcoder/domains/list/listPrimitives.py"
			],
			[
				"enum",
				"dreamcoder/enumeration.py"
			],
			[
				"helm",
				"solvers/Helmholtz.ml"
			],
			[
				"drea",
				"solvers/Dreaming.ml"
			],
			[
				"enumer",
				"dreamcoder/enumeration.py"
			],
			[
				"solver",
				"solvers/solver.ml"
			],
			[
				"compre",
				"solvers/compression.ml"
			],
			[
				"prop",
				"dreamcoder/domains/list/propSim.py"
			],
			[
				"like",
				"dreamcoder/likelihoodModel.py"
			],
			[
				"hel",
				"solvers/Helmholtz.ml"
			],
			[
				"dreaming",
				"solvers/Dreaming.ml"
			],
			[
				"task.ml",
				"solvers/task.ml"
			],
			[
				"differ",
				"solvers/differentiation.ml"
			],
			[
				"enu",
				"solvers/enumeration.ml"
			],
			[
				"program",
				"solvers/program.ml"
			],
			[
				"task",
				"solvers/task.ml"
			],
			[
				"dream",
				"solvers/Dreaming.ml"
			],
			[
				"jr.",
				"bin/jr.py"
			],
			[
				"dreami",
				"solvers/Dreaming.ml"
			],
			[
				"solvers/he",
				"solvers/Helmholtz.ml"
			],
			[
				"bin/jr",
				"bin/jr.py"
			],
			[
				"utils",
				"dreamcoder/domains/list/utilsProperties.py"
			],
			[
				"fron",
				"dreamcoder/frontier.py"
			],
			[
				"rec",
				"dreamcoder/recognition.py"
			],
			[
				"list",
				"bin/list.py"
			],
			[
				"reco",
				"dreamcoder/recognition.py"
			],
			[
				"dreaim",
				"dreamcoder/dreaming.py"
			],
			[
				"property",
				"dreamcoder/domains/list/propertySignatureExtractor.py"
			],
			[
				"propertyS",
				"dreamcoder/domains/list/propertySignatureExtractor.py"
			],
			[
				"he",
				"solvers/Helmholtz.ml"
			],
			[
				"draw",
				"solvers/draw.ml"
			],
			[
				"listP",
				"dreamcoder/domains/list/listPrimitives.py"
			],
			[
				"dreamc",
				"dreamcoder/dreamcoder.py"
			],
			[
				"deramin",
				"dreamcoder/dreaming.py"
			],
			[
				"recog",
				"dreamcoder/recognition.py"
			],
			[
				"propSim",
				"dreamcoder/domains/list/propSim.py"
			],
			[
				"util",
				"dreamcoder/domains/list/utilsProperties.py"
			],
			[
				"compare",
				"dreamcoder/domains/list/compareProperties.py"
			],
			[
				"plot",
				"ana/plot-trees-all.R"
			],
			[
				"proper",
				"dreamcoder/domains/list/property.py"
			],
			[
				"utilsProep",
				"dreamcoder/domains/list/utilsPropertySampling.py"
			],
			[
				"props",
				"dreamcoder/domains/list/propSim.py"
			],
			[
				"utilsPr",
				"dreamcoder/domains/list/utilsProperties.py"
			],
			[
				"proeprty",
				"dreamcoder/domains/list/propertySignatureExtractor.py"
			],
			[
				"progra",
				"dreamcoder/program.py"
			],
			[
				"hand",
				"dreamcoder/domains/list/handwrittenProperties.py"
			],
			[
				"proiper",
				"dreamcoder/domains/list/propertySignatureExtractor.py"
			],
			[
				"handw",
				"dreamcoder/domains/list/handwrittenProperties.py"
			],
			[
				"sample",
				"bin/sampleProperties.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "Uses",
		"selected_items":
		[
			[
				"Uses",
				"Uses"
			],
			[
				"josh",
				"joshTasks"
			],
			[
				"PRoxy",
				"enumerationProxy"
			],
			[
				"insideO",
				"insideOutside"
			],
			[
				"getTaskSImi",
				"getTaskSimilarFrontier"
			],
			[
				"enume",
				"enumerateHelmholtzOcaml"
			],
			[
				"compare",
				"comparePropSimFittedToRnnEncoded"
			],
			[
				"getProp",
				"getPropSimGrammars"
			],
			[
				"getPRop",
				"getPropSimGrammars"
			],
			[
				"enumerateHe",
				"enumerateHelmholtzOcaml"
			],
			[
				"enumerate_for",
				"enumerate_for_tasks"
			],
			[
				"multi",
				"multicoreEnumeration"
			],
			[
				"enumeratePr",
				"enumerateProperties"
			],
			[
				"super",
				"supervised_task"
			],
			[
				"helmhi",
				"helmholtz_enumeration"
			],
			[
				"Task",
				"Task"
			],
			[
				"plot",
				"plotFrontiers"
			],
			[
				"getGramm",
				"getGrammarsFromNeuralRecognizer"
			],
			[
				"enumerate_fo",
				"enumerate_for_tasks"
			],
			[
				"supervised_task",
				"supervised_task"
			],
			[
				"solve",
				"solveForTask_ocaml"
			],
			[
				"getGra",
				"getGrammarsFromNeuralRecognizer"
			],
			[
				"multicor",
				"multicoreEnumeration"
			],
			[
				"enumerat",
				"enumerateFromGrammars"
			],
			[
				"joshT",
				"joshTasks"
			],
			[
				"register",
				"register_special_task"
			],
			[
				"_ocaml",
				"solveForTask_ocaml"
			],
			[
				"enumerate",
				"enumerateFromGrammars"
			],
			[
				"loadEn",
				"loadEnumeratedTasks"
			],
			[
				"REcog",
				"RecognitionModel"
			],
			[
				"arrow",
				"arrow"
			],
			[
				"helmh",
				"helmholtzEnumeration"
			],
			[
				"bootstr",
				"bootstrapTarget_extra"
			],
			[
				"Early",
				"EarlyStopping"
			],
			[
				"plotFr",
				"plotFrontiers"
			],
			[
				"multic",
				"multicoreEnumeration"
			],
			[
				"enumera",
				"enumerateFromGrammars"
			],
			[
				"closedL",
				"closedLikelihoodSummary"
			],
			[
				"inside",
				"insideOutside"
			],
			[
				"getTaskSim",
				"getTaskSimilarFrontier"
			],
			[
				"getTaskSIm",
				"getPropertySimTasksMatrix"
			],
			[
				"joshTas",
				"joshTasks"
			],
			[
				"paralle",
				"parallelMap"
			],
			[
				"parseAnd",
				"parseAndMakeTaskFromProgram"
			],
			[
				"remove_bad",
				"remove_bad_dreams"
			],
			[
				"helmo",
				"helmholtz_enumeration"
			],
			[
				"helmholtz_en",
				"helmholtz_enumeration"
			],
			[
				"taskOfP",
				"taskOfProgram"
			],
			[
				"taskO",
				"taskOfProgram"
			],
			[
				"makeTa",
				"makeTaskFromProgram"
			],
			[
				"makeTas",
				"makeTaskFromProgram"
			],
			[
				"makeTasFr",
				"makeTaskFromProgram"
			],
			[
				"maketas",
				"makeTaskFromProgram"
			],
			[
				"josh_pri",
				"josh_primitives"
			],
			[
				"createFront",
				"createFrontiersWithInputsFromTask"
			],
			[
				"matrix",
				"getPropertySimTasksMatrix"
			],
			[
				"plotNum",
				"plotNumSampledPropertiesVersusMdl"
			],
			[
				"plotF",
				"plotFrontiers"
			],
			[
				"getPRo",
				"getPropertySamplingGrammar"
			],
			[
				"TypeCo",
				"TypeConstructor"
			],
			[
				"getTask",
				"getTaskPropertyValue"
			],
			[
				"getTaskPr",
				"getTaskPropertyValue"
			],
			[
				"propretyE",
				"propertyEnumerationMain"
			],
			[
				"TypeCon",
				"TypeConstructor"
			],
			[
				"getProper",
				"getPropertySamplingGrammar"
			],
			[
				"proper",
				"PropertySignatureExtractor"
			],
			[
				"property",
				"propertyEnumerationMain"
			],
			[
				"samplePr",
				"sampleProperties"
			],
			[
				"getPropertySim",
				"getPropertySimTasksMatrix"
			],
			[
				"convertTo",
				"convertToPropertyTasks"
			],
			[
				"sampleP",
				"sampleProperties"
			],
			[
				"compr",
				"comparePropSimFittedToRnnEncoded"
			],
			[
				"getPRops",
				"getPropSimGrammars"
			],
			[
				"vprint",
				"vprint"
			],
			[
				"Recurrent",
				"RecurrentFeatureExtractor"
			],
			[
				"Learned",
				"LearnedFeatureExtractor"
			],
			[
				"taskOf",
				"taskOfProgram"
			],
			[
				"multicore",
				"multicoreEnumeration"
			],
			[
				"getPRoper",
				"getPropertySamplingGrammar"
			],
			[
				"insie",
				"insideOutside"
			],
			[
				"comprare",
				"comparePropSimFittedToRnnEncoded"
			],
			[
				"getPropSim",
				"getPropSimGrammars"
			],
			[
				"getSimTask",
				"getSimilarTasksByProperty"
			],
			[
				"insi",
				"insideOutside"
			],
			[
				"getPRopS",
				"getPropSimGrammars"
			],
			[
				"enumerateFr",
				"enumerateFromGrammars"
			],
			[
				"enumerateFromG",
				"enumerateFromGrammars"
			]
		],
		"width": 592.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 221.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
